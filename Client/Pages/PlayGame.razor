@page "/PlayGame/{GameId}"

@inject HttpClient Http
@inject GameStorage Storage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (Game == null)
{
    if (_urlWrong)
    {
        <p>Sorry, it doesn't look like this is a valid game - please make sure your URL is correct and retry.</p>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}
else if (IdentifiedPlayer == null)
{
    <p>Sorry, it doesn't look like you're part of this game. <NavLink href="@($"WaitingRoom/{Guid.NewGuid().ToString()}")" Match="NavLinkMatch.All">Click here to host a new game</NavLink></p>
}
else
{
    <Modal Header="Game Over" Show="Game.Ended.HasValue" Closable="true">
        @GetWinner()
    </Modal>
    <Modal Header="Round Ended" Show="!Game.Ended.HasValue && Game.RoundEnded" Closable="false">
        @if (IdentifiedPlayer.IsHost)
        {
            <div class="row">
                <div class="col form-inline">
                    <label class="col-form-label mr-2">Either</label>
                    <button class="btn btn-success mr-2" @onclick="() => StartNewRoundAsync()">Start new round</button>
                    <label class="col-form-label mr-2">or</label>
                    <button class="btn btn-success mr-2" @onclick="() => EndGameAsync()">End game</button>
                </div>
            </div>
        }
        else
        {
            <span>Waiting for host to start next round...</span>
        }
    </Modal>
    <div id="GameContainer" class="container-fluid" style="height: calc(100vh - 4.6rem);">
        <div class="row" style="height: 80%;">
            <div class="col-9 col-md-6 ml-auto mr-auto h-100">
                @{
                    var card = !Game.ShowHand ? Game.Board.GetCardWithMinimumDifference(IdentifiedPlayer.SelectedCard) : null;
                    for (int i = 0; i < Game.Board.RowCount; i++)
                    {
                        <div class="row mb-2 align-items-center justify-content-center" style="height: calc(25% - 0.5em);">
                            @for (int j = 0; j < Game.Board.ColumnCount; j++)
                            {
                                var tempI = i;
                                var tempJ = j;
                                var isDropzone = !Game.ShowHand && (card == null || card != null && j > 0 && Game.Board[i, j - 1] != null && Game.Board[i, j - 1].Equals(card));
                                <div class="col-2 h-100 @(isDropzone ? "dropzone" : "")" ondragover="@(isDropzone ? "event.preventDefault();" : "")" @ondrop="() => CardPlayed(tempI, tempJ)">
                                    <div class="card border rounded h-100">
                                        @if (Game.Board[i, j] != null)
                                        {
                                            <CardInfo Card="Game.Board[i, j]" />
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    }
                }
            </div>
            <div class="col-3 col-md-2 h-100 pb-2">
                <GameSidebar Game="Game" />
            </div>
        </div>
        <div class="row p-1 bg-primary justify-content-center align-items-center player-hand" style="height: 20%;">
            @if (Game.ShowHand)
            {
                <CascadingValue Value="this">
                    <Hand />
                </CascadingValue>
            }
            else
            {
                var playerIndex = 0;
                foreach (var player in Game.Players.Where(p => p.SelectedCard != null).OrderBy(p => p.SelectedCard.Value))
                {
                    <div class="col-2 col-md-1 h-100">
                        @if (playerIndex == 0 && player.Name == IdentifiedPlayer.Name)
                        {
                            <div class="card rounded h-100 bg-light" draggable="true" @ondragstart="e => StartDragAsync(e)" @ondrag="e => BroadcastCoordinatesAsync(e)" @ondragend="StopDragAsync" @ref="_draggedCard">
                                <CardInfo Card="player.SelectedCard" PlayerName="@player.Name" />
                            </div>
                        }
                        else if (playerIndex == 0 && _draggedPlayingCardCoordinates != null)
                        {
                            <div style="@($"position: fixed; left: {_draggedPlayingCardCoordinates.X}%; top: {_draggedPlayingCardCoordinates.Y}%; width: {_cardSize?.Width}px; height: {_cardSize?.Height}px;")">
                                <div class="card border rounded bg-light">
                                    <CardInfo Card="player.SelectedCard" PlayerName="@player.Name" />
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="card border rounded h-100 bg-light">
                                <CardInfo Card="player.SelectedCard" PlayerName="@player.Name" />
                            </div>
                        }
                    </div>
                    playerIndex++;
                }
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public string GameId { get; set; }

    public Player IdentifiedPlayer { get; set; }
    public Game Game { get; private set; }

    private HubConnection _hubConnection;

    private bool _urlWrong = false;
    private Coordinates _draggedPlayingCardCoordinates;
    private Coordinates _draggedPlayingCardOffset;
    private Dimensions _screenSize;
    private Dimensions _cardSize;
    private ElementReference _draggedCard;
    private bool _runningOnFirefox;

    protected override async Task OnInitializedAsync()
    {
        Game = JsonConvert.DeserializeObject<Game>(await Http.GetStringAsync($"api/Game/Get?id={GameId}"));

        if (Game == null)
        {
            _urlWrong = true;
        }
        else if (!Game.Started.HasValue || Storage.GameId != GameId)
        {
            NavigationManager.NavigateTo($"/WaitingRoom/{GameId}");
        }
        else
        {
            IdentifiedPlayer = Game.Players.SingleOrDefault(x => x.Name == Storage.PlayerName);
            if (IdentifiedPlayer != null)
            {
                await ConfigureHubAsync();
            }
            _screenSize = await JSRuntime.InvokeAsync<Dimensions>("sixnimmt.getScreenSize");
            _runningOnFirefox = await JSRuntime.InvokeAsync<bool>("sixnimmt.runningOnFirefox");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && _cardSize == null)
        {
            _cardSize = await JSRuntime.InvokeAsync<Dimensions>("sixnimmt.getCardSize");
        }
    }

    private async Task ConfigureHubAsync()
    {
        _hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/GameHub")).WithAutomaticReconnect().Build();
        _hubConnection.On<string>("UpdateGame", updatedGame =>
        {
            Game = JsonConvert.DeserializeObject<Game>(updatedGame);
            IdentifiedPlayer = Game.Players.Single(x => x.Name == IdentifiedPlayer.Name);
            _draggedPlayingCardCoordinates = null;
            StateHasChanged();
        });
        _hubConnection.On<string, Card>("PlayerSelectedCard", (playerName, card) =>
        {
            var player = Game.Players.Single(p => p.Name == playerName);
            player.SelectedCard = card;
            player.Hand.Remove(card);
            Game.ShowHand = Game.Players.Any(p => p.SelectedCard == null);
            StateHasChanged();
        });
        _hubConnection.On<Coordinates>("CoordinatesReceived", (coordinates) =>
        {
            _draggedPlayingCardCoordinates = coordinates;
            StateHasChanged();
        });
        await _hubConnection.StartAsync();
        await _hubConnection.InvokeAsync("AddToGroupAsync", GameId);
    }

    private async Task StartDragAsync(DragEventArgs e)
    {
        var cardCoordinates = await JSRuntime.InvokeAsync<Coordinates>("sixnimmt.getElementCoordinates", _draggedCard);
        _draggedPlayingCardOffset = new Coordinates { X = cardCoordinates.X - e.ClientX, Y = cardCoordinates.Y - e.ClientY };
    }

    private async Task BroadcastCoordinatesAsync(DragEventArgs e)
    {
        var coordinates = _runningOnFirefox ? await JSRuntime.InvokeAsync<Coordinates>("sixnimmt.getDocumentDragCoordinates", _draggedCard) : new Coordinates { X = e.ClientX, Y = e.ClientY };
        await _hubConnection.InvokeAsync("BroadcastCoordinatesAsync", GameId, new Coordinates { X = 100 * (coordinates.X + _draggedPlayingCardOffset.X) / _screenSize.Width, Y = 100 * (coordinates.Y + _draggedPlayingCardOffset.Y) / _screenSize.Height });
    }

    private async Task StopDragAsync()
    {
        _draggedPlayingCardOffset = null;
        await _hubConnection.InvokeAsync("BroadcastCoordinatesAsync", GameId, null);
    }

    private async Task CardPlayed(int row, int column)
    {
        if (IdentifiedPlayer.SelectedCard < Game.Board.GetLastCardInRow(row) || column == Game.Board.ColumnCount - 1)
        {
            var cardCount = Game.Board.GetLastCardIndexInRow(row);
            for (int i = 0; i <= cardCount; i++)
            {
                IdentifiedPlayer.Points += Game.Board[row, i].Points;
                Game.Board[row, i] = i == 0 ? IdentifiedPlayer.SelectedCard : null;
            }
        }
        else
        {
            Game.Board[row, column] = IdentifiedPlayer.SelectedCard;
        }

        IdentifiedPlayer.SelectedCard = null;
        Game.ShowHand = Game.Players.All(p => p.SelectedCard == null);
        Game.RoundEnded = Game.ShowHand && Game.Players.All(p => p.Hand.Count == 0);

        if (Game.RoundEnded && Game.Players.Any(p => p.Points > 66))
        {
            Game.Ended = DateTime.UtcNow;
        }

        await UpdateGameAsync();
    }

    private async Task StartNewRoundAsync()
    {
        Game.StartRound();
        await UpdateGameAsync();
    }

    private async Task EndGameAsync()
    {
        Game.Ended = DateTime.UtcNow;
        await UpdateGameAsync();
    }

    private async Task UpdateGameAsync()
    {
        var serializedGame = JsonConvert.SerializeObject(Game);
        await Task.WhenAll(Http.PostAsJsonAsync("api/Game/Save", serializedGame), _hubConnection.InvokeAsync("UpdateGameAsync", GameId, serializedGame));
    }

    private string GetWinner()
    {
        var lowestScore = Game.Players.Min(c => c.Points);
        var winners = Game.Players.Where(p => p.Points == lowestScore).ToList();
        if (winners.Count > 1)
        {
            return $"{string.Join(", ", winners.Take(winners.Count - 1).Select(w => w.Name))} and {winners.Last().Name} are joint winners!";
        }
        else
        {
            return $"{winners.First().Name} is the winner!";
        }
    }

    public async Task UpdateSelectedCardAsync()
    {
        await Task.WhenAll(
        Http.PostAsJsonAsync("api/Game/SelectCard", new { GameId = Game.Id, PlayerName = IdentifiedPlayer.Name, Card = JsonConvert.SerializeObject(IdentifiedPlayer.SelectedCard) }),
        _hubConnection.InvokeAsync("PlayerSelectedCardAsync", Game.Id, IdentifiedPlayer.Name, IdentifiedPlayer.SelectedCard));
        StateHasChanged();
    }
}