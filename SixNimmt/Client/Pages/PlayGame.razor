@page "/PlayGame/{GameId}"

@using Microsoft.AspNetCore.SignalR.Client

@inject HttpClient Http
@inject LocalStorage Storage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (Game == null)
{
    @if (_urlWrong)
    {
        <p>Sorry, it doesn't look like this is a valid game - please make sure your URL is correct and retry.</p>
    }
    else
    {
        <p><em>Loading...</em></p>
    }
}
else
{
    <div class="container-fluid" style="height: calc(0.8 * (100vh - 4.6rem));">
        <div class="row h-100">
            <div class="col-8 col-md-6 ml-auto mr-auto h-100">
                @for (int i = 0; i < Game.CardRows.GetLength(0); i++)
                {
                    <div class="row mb-2 align-items-center justify-content-center" style="height: calc(25% - 0.5em);">
                        @for (int j = 0; j < Game.CardRows.GetLength(1); j++)
                        {
                            <div class="col h-100">
                                <div class="card border rounded h-100">
                                    @if (Game.CardRows[i, j] != null)
                                    {
                                        <div class="card-header text-right font-weight-bold">
                                            @Game.CardRows[i, j].Points
                                        </div>
                                        <div class="row card-body text-center align-items-center">
                                            <h2 class="col mb-0 font-weight-bold">@Game.CardRows[i, j].Value</h2>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
            <div class="col-4 col-md-2 h-100 pb-2">
                <div class="card border rounded h-100">
                    <div class="card-header">
                        <h3 class="mb-0 font-weight-bold">Scores</h3>
                    </div>
                    <div class="card-body p-0">
                        <table class="table table-striped table-bordered m-0">
                            <thead>
                                <tr>
                                    <th>Player</th>
                                    <th>Score</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var player in Game.Players.OrderByDescending(x => x.Points).ThenBy(x => x.Name))
                                {
                                    <tr>
                                        <td class="align-middle">@player.Name</td>
                                        <td class="align-middle">@player.Points</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="card-footer">
                        Game ends at 66 points.
                    </div>
                </div>
            </div>
        </div>
        <div class="row sticky-bottom p-1 bg-primary justify-content-center align-items-center player-hand" style="height: calc(0.2 * (100vh - 4.6rem));">
            <div class="col-2 col-md-1">
                <h5 class="mb-0">Your Hand:</h5>
            </div>
            <div class="row col-11 bg-primary justify-content-center h-100 dropzone" ondragover="event.preventDefault();">
                @foreach (var card in IdentifiedPlayer.Hand)
                {
                    <div class="col-2 col-md-1 h-100" draggable="true" @ondragstart="() => StartDragCard(card)" @ondrop="() => DropCard(card)">
                        <div class="card border rounded h-100 bg-light">
                            <div class="card-header text-right">
                                @card.Points
                            </div>
                            <div class="row card-body text-center align-items-center">
                                <h2 class="col mb-0 font-weight-bold">@card.Value</h2>
                            </div>
                        </div>
                    </div>
                }
                <div class="col-2 col-md-1 h-100 ml-auto mr-auto">
                    <div class="card border-success rounded h-100 bg-light dropzone" ondragover="event.preventDefault();" draggable="@(IdentifiedPlayer.SelectedCard != null ? "true" : "false")" @ondragstart="() => StartDragCard(IdentifiedPlayer.SelectedCard)" @ondrop="() => SelectCard()">
                        @if (IdentifiedPlayer.SelectedCard == null)
                        {
                            <div class="row card-body text-center align-items-center">
                                <span class="text-muted">Drag Your Selection Here</span>
                            </div>
                        }
                        else
                        {
                            <div class="card-header text-right">
                                @IdentifiedPlayer.SelectedCard.Points
                            </div>
                            <div class="row card-body text-center align-items-center">
                                <h2 class="col mb-0 font-weight-bold">@IdentifiedPlayer.SelectedCard.Value</h2>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string GameId { get; set; }

    public Player IdentifiedPlayer { get; set; }
    public Game Game { get; private set; }

    private bool _urlWrong = false;
    private HubConnection _hubConnection;
    private int _draggedCardIndex;

    protected override async Task OnInitializedAsync()
    {
        Game = JsonConvert.DeserializeObject<Game>(await Http.GetStringAsync($"api/Game/Get?id={GameId}"));

        if (Game == null)
        {
            _urlWrong = true;
        }
        else if (!Game.Started)
        {
            NavigationManager.NavigateTo($"/WaitingRoom/{GameId}");
        }
        else
        {
            await ConfigureHubAsync();
            IdentifiedPlayer = Game.Players.SingleOrDefault(x => x.Name == Storage.GetItem("playerName"));
        }
    }

    private async Task ConfigureHubAsync()
    {
        _hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/GameHub")).WithAutomaticReconnect().Build();
        _hubConnection.On<string>("UpdateGame", updatedGame =>
        {
            Game = JsonConvert.DeserializeObject<Game>(updatedGame);
            StateHasChanged();
        });
        _hubConnection.On<string, Card>("PlayerSelectedCard", (playerName, card) =>
        {
            Game.Players.Single(p => p.Name == playerName).SelectedCard = card;
            StateHasChanged();
        });
        await _hubConnection.StartAsync();
        await _hubConnection.InvokeAsync("AddToGroupAsync", GameId);
    }

    private void StartDragCard(Card card) => _draggedCardIndex = IdentifiedPlayer.Hand.FindIndex(c => c.Value == card.Value);

    private void DropCard(Card card)
    {
        var newIndex = IdentifiedPlayer.Hand.FindIndex(c => c.Value == card.Value);

        Card draggedCard;
        if (_draggedCardIndex > 0)
        {
            draggedCard = IdentifiedPlayer.Hand[_draggedCardIndex];
            IdentifiedPlayer.Hand.RemoveAt(_draggedCardIndex);
        }
        else
        {
            draggedCard = IdentifiedPlayer.SelectedCard;
            IdentifiedPlayer.SelectedCard = null;
        }

        AddToHand(newIndex, draggedCard);
    }

    private async Task SelectCard()
    {
        if (IdentifiedPlayer.SelectedCard == null)
        {
            IdentifiedPlayer.SelectedCard = IdentifiedPlayer.Hand[_draggedCardIndex];
            IdentifiedPlayer.Hand.RemoveAt(_draggedCardIndex);
        }
        else
        {
            var oldSelectedCard = IdentifiedPlayer.SelectedCard;
            IdentifiedPlayer.SelectedCard = IdentifiedPlayer.Hand[_draggedCardIndex];
            IdentifiedPlayer.Hand.RemoveAt(_draggedCardIndex);
            AddToHand(_draggedCardIndex, oldSelectedCard);
        }

        await Task.WhenAll(
            Http.PostJsonAsync("api/Game/SelectCard", new { GameId = GameId, PlayerName = IdentifiedPlayer.Name, Card = JsonConvert.SerializeObject(IdentifiedPlayer.SelectedCard) }),
            _hubConnection.InvokeAsync("PlayerSelectedCardAsync", GameId, IdentifiedPlayer.Name, IdentifiedPlayer.SelectedCard));
    }

    private void AddToHand(int index, Card card)
    {
        if (IdentifiedPlayer.Hand.Count > index)
        {
            IdentifiedPlayer.Hand.Insert(index, card);
        }
        else
        {
            IdentifiedPlayer.Hand.Add(card);
        }
    }
}